/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ParametersRegionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParametersRegionsInner{}

// ParametersRegionsInner struct for ParametersRegionsInner
type ParametersRegionsInner struct {
	Backups []ParametersRegionsInnerBackupsInner `json:"backups,omitempty"`
	Name    string                               `json:"name"`
	Uuid    string                               `json:"uuid"`
}

type _ParametersRegionsInner ParametersRegionsInner

// NewParametersRegionsInner instantiates a new ParametersRegionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParametersRegionsInner(name string, uuid string) *ParametersRegionsInner {
	this := ParametersRegionsInner{}
	this.Name = name
	this.Uuid = uuid
	return &this
}

// NewParametersRegionsInnerWithDefaults instantiates a new ParametersRegionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParametersRegionsInnerWithDefaults() *ParametersRegionsInner {
	this := ParametersRegionsInner{}
	return &this
}

// GetBackups returns the Backups field value if set, zero value otherwise.
func (o *ParametersRegionsInner) GetBackups() []ParametersRegionsInnerBackupsInner {
	if o == nil || IsNil(o.Backups) {
		var ret []ParametersRegionsInnerBackupsInner
		return ret
	}
	return o.Backups
}

// GetBackupsOk returns a tuple with the Backups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParametersRegionsInner) GetBackupsOk() ([]ParametersRegionsInnerBackupsInner, bool) {
	if o == nil || IsNil(o.Backups) {
		return nil, false
	}
	return o.Backups, true
}

// HasBackups returns a boolean if a field has been set.
func (o *ParametersRegionsInner) HasBackups() bool {
	if o != nil && !IsNil(o.Backups) {
		return true
	}

	return false
}

// SetBackups gets a reference to the given []ParametersRegionsInnerBackupsInner and assigns it to the Backups field.
func (o *ParametersRegionsInner) SetBackups(v []ParametersRegionsInnerBackupsInner) {
	o.Backups = v
}

// GetName returns the Name field value
func (o *ParametersRegionsInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ParametersRegionsInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ParametersRegionsInner) SetName(v string) {
	o.Name = v
}

// GetUuid returns the Uuid field value
func (o *ParametersRegionsInner) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *ParametersRegionsInner) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *ParametersRegionsInner) SetUuid(v string) {
	o.Uuid = v
}

func (o ParametersRegionsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParametersRegionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Backups) {
		toSerialize["backups"] = o.Backups
	}
	toSerialize["name"] = o.Name
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *ParametersRegionsInner) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParametersRegionsInner := _ParametersRegionsInner{}

	err = json.Unmarshal(bytes, &varParametersRegionsInner)

	if err != nil {
		return err
	}

	*o = ParametersRegionsInner(varParametersRegionsInner)

	return err
}

type NullableParametersRegionsInner struct {
	value *ParametersRegionsInner
	isSet bool
}

func (v NullableParametersRegionsInner) Get() *ParametersRegionsInner {
	return v.value
}

func (v *NullableParametersRegionsInner) Set(val *ParametersRegionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableParametersRegionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableParametersRegionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParametersRegionsInner(val *ParametersRegionsInner) *NullableParametersRegionsInner {
	return &NullableParametersRegionsInner{value: val, isSet: true}
}

func (v NullableParametersRegionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParametersRegionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
