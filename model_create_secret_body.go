/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateSecretBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSecretBody{}

// CreateSecretBody struct for CreateSecretBody
type CreateSecretBody struct {
	SecretName string `json:"secretName"`
	SecretValue string `json:"secretValue"`
}

type _CreateSecretBody CreateSecretBody

// NewCreateSecretBody instantiates a new CreateSecretBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSecretBody(secretName string, secretValue string) *CreateSecretBody {
	this := CreateSecretBody{}
	this.SecretName = secretName
	this.SecretValue = secretValue
	return &this
}

// NewCreateSecretBodyWithDefaults instantiates a new CreateSecretBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSecretBodyWithDefaults() *CreateSecretBody {
	this := CreateSecretBody{}
	return &this
}

// GetSecretName returns the SecretName field value
func (o *CreateSecretBody) GetSecretName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretName
}

// GetSecretNameOk returns a tuple with the SecretName field value
// and a boolean to check if the value has been set.
func (o *CreateSecretBody) GetSecretNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretName, true
}

// SetSecretName sets field value
func (o *CreateSecretBody) SetSecretName(v string) {
	o.SecretName = v
}

// GetSecretValue returns the SecretValue field value
func (o *CreateSecretBody) GetSecretValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretValue
}

// GetSecretValueOk returns a tuple with the SecretValue field value
// and a boolean to check if the value has been set.
func (o *CreateSecretBody) GetSecretValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretValue, true
}

// SetSecretValue sets field value
func (o *CreateSecretBody) SetSecretValue(v string) {
	o.SecretValue = v
}

func (o CreateSecretBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSecretBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["secretName"] = o.SecretName
	toSerialize["secretValue"] = o.SecretValue
	return toSerialize, nil
}

func (o *CreateSecretBody) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"secretName",
		"secretValue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSecretBody := _CreateSecretBody{}

	err = json.Unmarshal(bytes, &varCreateSecretBody)

	if err != nil {
		return err
	}

	*o = CreateSecretBody(varCreateSecretBody)

	return err
}

type NullableCreateSecretBody struct {
	value *CreateSecretBody
	isSet bool
}

func (v NullableCreateSecretBody) Get() *CreateSecretBody {
	return v.value
}

func (v *NullableCreateSecretBody) Set(val *CreateSecretBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSecretBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSecretBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSecretBody(val *CreateSecretBody) *NullableCreateSecretBody {
	return &NullableCreateSecretBody{value: val, isSet: true}
}

func (v NullableCreateSecretBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSecretBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


