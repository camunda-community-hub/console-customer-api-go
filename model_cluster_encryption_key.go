/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ClusterEncryptionKey the model 'ClusterEncryptionKey'
type ClusterEncryptionKey string

// List of ClusterEncryptionKey
const (
	CLUSTERENCRYPTIONKEY_SOFTWARE ClusterEncryptionKey = "Software"
	CLUSTERENCRYPTIONKEY_HARDWARE ClusterEncryptionKey = "Hardware"
	CLUSTERENCRYPTIONKEY_PROVIDER ClusterEncryptionKey = "Provider"
)

// All allowed values of ClusterEncryptionKey enum
var AllowedClusterEncryptionKeyEnumValues = []ClusterEncryptionKey{
	"Software",
	"Hardware",
	"Provider",
}

func (v *ClusterEncryptionKey) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterEncryptionKey(value)
	for _, existing := range AllowedClusterEncryptionKeyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterEncryptionKey", value)
}

// NewClusterEncryptionKeyFromValue returns a pointer to a valid ClusterEncryptionKey
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterEncryptionKeyFromValue(v string) (*ClusterEncryptionKey, error) {
	ev := ClusterEncryptionKey(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterEncryptionKey: valid values are %v", v, AllowedClusterEncryptionKeyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterEncryptionKey) IsValid() bool {
	for _, existing := range AllowedClusterEncryptionKeyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterEncryptionKey value
func (v ClusterEncryptionKey) Ptr() *ClusterEncryptionKey {
	return &v
}

type NullableClusterEncryptionKey struct {
	value *ClusterEncryptionKey
	isSet bool
}

func (v NullableClusterEncryptionKey) Get() *ClusterEncryptionKey {
	return v.value
}

func (v *NullableClusterEncryptionKey) Set(val *ClusterEncryptionKey) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterEncryptionKey) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterEncryptionKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterEncryptionKey(val *ClusterEncryptionKey) *NullableClusterEncryptionKey {
	return &NullableClusterEncryptionKey{value: val, isSet: true}
}

func (v NullableClusterEncryptionKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterEncryptionKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
