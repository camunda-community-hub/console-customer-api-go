/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrganizationRoleMODELER the model 'OrganizationRoleMODELER'
type OrganizationRoleMODELER string

// List of OrganizationRole.MODELER
const (
	ORGANIZATIONROLEMODELER_MODELER OrganizationRoleMODELER = "modeler"
)

// All allowed values of OrganizationRoleMODELER enum
var AllowedOrganizationRoleMODELEREnumValues = []OrganizationRoleMODELER{
	"modeler",
}

func (v *OrganizationRoleMODELER) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationRoleMODELER(value)
	for _, existing := range AllowedOrganizationRoleMODELEREnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationRoleMODELER", value)
}

// NewOrganizationRoleMODELERFromValue returns a pointer to a valid OrganizationRoleMODELER
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationRoleMODELERFromValue(v string) (*OrganizationRoleMODELER, error) {
	ev := OrganizationRoleMODELER(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationRoleMODELER: valid values are %v", v, AllowedOrganizationRoleMODELEREnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationRoleMODELER) IsValid() bool {
	for _, existing := range AllowedOrganizationRoleMODELEREnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationRole.MODELER value
func (v OrganizationRoleMODELER) Ptr() *OrganizationRoleMODELER {
	return &v
}

type NullableOrganizationRoleMODELER struct {
	value *OrganizationRoleMODELER
	isSet bool
}

func (v NullableOrganizationRoleMODELER) Get() *OrganizationRoleMODELER {
	return v.value
}

func (v *NullableOrganizationRoleMODELER) Set(val *OrganizationRoleMODELER) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationRoleMODELER) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationRoleMODELER) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationRoleMODELER(val *OrganizationRoleMODELER) *NullableOrganizationRoleMODELER {
	return &NullableOrganizationRoleMODELER{value: val, isSet: true}
}

func (v NullableOrganizationRoleMODELER) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationRoleMODELER) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
