/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrganizationRoleADMIN the model 'OrganizationRoleADMIN'
type OrganizationRoleADMIN string

// List of OrganizationRole.ADMIN
const (
	ADMIN OrganizationRoleADMIN = "admin"
)

// All allowed values of OrganizationRoleADMIN enum
var AllowedOrganizationRoleADMINEnumValues = []OrganizationRoleADMIN{
	"admin",
}

func (v *OrganizationRoleADMIN) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationRoleADMIN(value)
	for _, existing := range AllowedOrganizationRoleADMINEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationRoleADMIN", value)
}

// NewOrganizationRoleADMINFromValue returns a pointer to a valid OrganizationRoleADMIN
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationRoleADMINFromValue(v string) (*OrganizationRoleADMIN, error) {
	ev := OrganizationRoleADMIN(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationRoleADMIN: valid values are %v", v, AllowedOrganizationRoleADMINEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationRoleADMIN) IsValid() bool {
	for _, existing := range AllowedOrganizationRoleADMINEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationRole.ADMIN value
func (v OrganizationRoleADMIN) Ptr() *OrganizationRoleADMIN {
	return &v
}

type NullableOrganizationRoleADMIN struct {
	value *OrganizationRoleADMIN
	isSet bool
}

func (v NullableOrganizationRoleADMIN) Get() *OrganizationRoleADMIN {
	return v.value
}

func (v *NullableOrganizationRoleADMIN) Set(val *OrganizationRoleADMIN) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationRoleADMIN) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationRoleADMIN) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationRoleADMIN(val *OrganizationRoleADMIN) *NullableOrganizationRoleADMIN {
	return &NullableOrganizationRoleADMIN{value: val, isSet: true}
}

func (v NullableOrganizationRoleADMIN) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationRoleADMIN) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

