/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the PostMemberBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostMemberBody{}

// PostMemberBody struct for PostMemberBody
type PostMemberBody struct {
	OrgRoles []AssignableOrganizationRoleType `json:"orgRoles"`
}

type _PostMemberBody PostMemberBody

// NewPostMemberBody instantiates a new PostMemberBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostMemberBody(orgRoles []AssignableOrganizationRoleType) *PostMemberBody {
	this := PostMemberBody{}
	this.OrgRoles = orgRoles
	return &this
}

// NewPostMemberBodyWithDefaults instantiates a new PostMemberBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostMemberBodyWithDefaults() *PostMemberBody {
	this := PostMemberBody{}
	return &this
}

// GetOrgRoles returns the OrgRoles field value
func (o *PostMemberBody) GetOrgRoles() []AssignableOrganizationRoleType {
	if o == nil {
		var ret []AssignableOrganizationRoleType
		return ret
	}

	return o.OrgRoles
}

// GetOrgRolesOk returns a tuple with the OrgRoles field value
// and a boolean to check if the value has been set.
func (o *PostMemberBody) GetOrgRolesOk() ([]AssignableOrganizationRoleType, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrgRoles, true
}

// SetOrgRoles sets field value
func (o *PostMemberBody) SetOrgRoles(v []AssignableOrganizationRoleType) {
	o.OrgRoles = v
}

func (o PostMemberBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostMemberBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["orgRoles"] = o.OrgRoles
	return toSerialize, nil
}

func (o *PostMemberBody) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"orgRoles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostMemberBody := _PostMemberBody{}

	err = json.Unmarshal(bytes, &varPostMemberBody)

	if err != nil {
		return err
	}

	*o = PostMemberBody(varPostMemberBody)

	return err
}

type NullablePostMemberBody struct {
	value *PostMemberBody
	isSet bool
}

func (v NullablePostMemberBody) Get() *PostMemberBody {
	return v.value
}

func (v *NullablePostMemberBody) Set(val *PostMemberBody) {
	v.value = val
	v.isSet = true
}

func (v NullablePostMemberBody) IsSet() bool {
	return v.isSet
}

func (v *NullablePostMemberBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostMemberBody(val *PostMemberBody) *NullablePostMemberBody {
	return &NullablePostMemberBody{value: val, isSet: true}
}

func (v NullablePostMemberBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostMemberBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
