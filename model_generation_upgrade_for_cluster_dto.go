/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the GenerationUpgradeForClusterDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenerationUpgradeForClusterDto{}

// GenerationUpgradeForClusterDto struct for GenerationUpgradeForClusterDto
type GenerationUpgradeForClusterDto struct {
	Cluster       GenerationUpgradeForClusterDtoCluster `json:"cluster"`
	NewGeneration GenerationUpgradeForClusterDtoCluster `json:"newGeneration"`
	OldGeneration GenerationUpgradeForClusterDtoCluster `json:"oldGeneration"`
	OrgId         string                                `json:"orgId"`
}

type _GenerationUpgradeForClusterDto GenerationUpgradeForClusterDto

// NewGenerationUpgradeForClusterDto instantiates a new GenerationUpgradeForClusterDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerationUpgradeForClusterDto(cluster GenerationUpgradeForClusterDtoCluster, newGeneration GenerationUpgradeForClusterDtoCluster, oldGeneration GenerationUpgradeForClusterDtoCluster, orgId string) *GenerationUpgradeForClusterDto {
	this := GenerationUpgradeForClusterDto{}
	this.Cluster = cluster
	this.NewGeneration = newGeneration
	this.OldGeneration = oldGeneration
	this.OrgId = orgId
	return &this
}

// NewGenerationUpgradeForClusterDtoWithDefaults instantiates a new GenerationUpgradeForClusterDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerationUpgradeForClusterDtoWithDefaults() *GenerationUpgradeForClusterDto {
	this := GenerationUpgradeForClusterDto{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *GenerationUpgradeForClusterDto) GetCluster() GenerationUpgradeForClusterDtoCluster {
	if o == nil {
		var ret GenerationUpgradeForClusterDtoCluster
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *GenerationUpgradeForClusterDto) GetClusterOk() (*GenerationUpgradeForClusterDtoCluster, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *GenerationUpgradeForClusterDto) SetCluster(v GenerationUpgradeForClusterDtoCluster) {
	o.Cluster = v
}

// GetNewGeneration returns the NewGeneration field value
func (o *GenerationUpgradeForClusterDto) GetNewGeneration() GenerationUpgradeForClusterDtoCluster {
	if o == nil {
		var ret GenerationUpgradeForClusterDtoCluster
		return ret
	}

	return o.NewGeneration
}

// GetNewGenerationOk returns a tuple with the NewGeneration field value
// and a boolean to check if the value has been set.
func (o *GenerationUpgradeForClusterDto) GetNewGenerationOk() (*GenerationUpgradeForClusterDtoCluster, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewGeneration, true
}

// SetNewGeneration sets field value
func (o *GenerationUpgradeForClusterDto) SetNewGeneration(v GenerationUpgradeForClusterDtoCluster) {
	o.NewGeneration = v
}

// GetOldGeneration returns the OldGeneration field value
func (o *GenerationUpgradeForClusterDto) GetOldGeneration() GenerationUpgradeForClusterDtoCluster {
	if o == nil {
		var ret GenerationUpgradeForClusterDtoCluster
		return ret
	}

	return o.OldGeneration
}

// GetOldGenerationOk returns a tuple with the OldGeneration field value
// and a boolean to check if the value has been set.
func (o *GenerationUpgradeForClusterDto) GetOldGenerationOk() (*GenerationUpgradeForClusterDtoCluster, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldGeneration, true
}

// SetOldGeneration sets field value
func (o *GenerationUpgradeForClusterDto) SetOldGeneration(v GenerationUpgradeForClusterDtoCluster) {
	o.OldGeneration = v
}

// GetOrgId returns the OrgId field value
func (o *GenerationUpgradeForClusterDto) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *GenerationUpgradeForClusterDto) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *GenerationUpgradeForClusterDto) SetOrgId(v string) {
	o.OrgId = v
}

func (o GenerationUpgradeForClusterDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerationUpgradeForClusterDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster"] = o.Cluster
	toSerialize["newGeneration"] = o.NewGeneration
	toSerialize["oldGeneration"] = o.OldGeneration
	toSerialize["orgId"] = o.OrgId
	return toSerialize, nil
}

func (o *GenerationUpgradeForClusterDto) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cluster",
		"newGeneration",
		"oldGeneration",
		"orgId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenerationUpgradeForClusterDto := _GenerationUpgradeForClusterDto{}

	err = json.Unmarshal(bytes, &varGenerationUpgradeForClusterDto)

	if err != nil {
		return err
	}

	*o = GenerationUpgradeForClusterDto(varGenerationUpgradeForClusterDto)

	return err
}

type NullableGenerationUpgradeForClusterDto struct {
	value *GenerationUpgradeForClusterDto
	isSet bool
}

func (v NullableGenerationUpgradeForClusterDto) Get() *GenerationUpgradeForClusterDto {
	return v.value
}

func (v *NullableGenerationUpgradeForClusterDto) Set(val *GenerationUpgradeForClusterDto) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerationUpgradeForClusterDto) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerationUpgradeForClusterDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerationUpgradeForClusterDto(val *GenerationUpgradeForClusterDto) *NullableGenerationUpgradeForClusterDto {
	return &NullableGenerationUpgradeForClusterDto{value: val, isSet: true}
}

func (v NullableGenerationUpgradeForClusterDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerationUpgradeForClusterDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
