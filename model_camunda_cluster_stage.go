/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CamundaClusterStage the model 'CamundaClusterStage'
type CamundaClusterStage string

// List of CamundaClusterStage
const (
	CAMUNDACLUSTERSTAGE_DEV   CamundaClusterStage = "dev"
	CAMUNDACLUSTERSTAGE_TEST  CamundaClusterStage = "test"
	CAMUNDACLUSTERSTAGE_STAGE CamundaClusterStage = "stage"
	CAMUNDACLUSTERSTAGE_PROD  CamundaClusterStage = "prod"
)

// All allowed values of CamundaClusterStage enum
var AllowedCamundaClusterStageEnumValues = []CamundaClusterStage{
	"dev",
	"test",
	"stage",
	"prod",
}

func (v *CamundaClusterStage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CamundaClusterStage(value)
	for _, existing := range AllowedCamundaClusterStageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CamundaClusterStage", value)
}

// NewCamundaClusterStageFromValue returns a pointer to a valid CamundaClusterStage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCamundaClusterStageFromValue(v string) (*CamundaClusterStage, error) {
	ev := CamundaClusterStage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CamundaClusterStage: valid values are %v", v, AllowedCamundaClusterStageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CamundaClusterStage) IsValid() bool {
	for _, existing := range AllowedCamundaClusterStageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CamundaClusterStage value
func (v CamundaClusterStage) Ptr() *CamundaClusterStage {
	return &v
}

type NullableCamundaClusterStage struct {
	value *CamundaClusterStage
	isSet bool
}

func (v NullableCamundaClusterStage) Get() *CamundaClusterStage {
	return v.value
}

func (v *NullableCamundaClusterStage) Set(val *CamundaClusterStage) {
	v.value = val
	v.isSet = true
}

func (v NullableCamundaClusterStage) IsSet() bool {
	return v.isSet
}

func (v *NullableCamundaClusterStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCamundaClusterStage(val *CamundaClusterStage) *NullableCamundaClusterStage {
	return &NullableCamundaClusterStage{value: val, isSet: true}
}

func (v NullableCamundaClusterStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCamundaClusterStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
