/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ClusterPlanType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterPlanType{}

// ClusterPlanType Also called `ClusterPlanType`, this describes the hardware used to run your Camunda cluster.
type ClusterPlanType struct {
	Name string `json:"name"`
	Uuid string `json:"uuid"`
}

type _ClusterPlanType ClusterPlanType

// NewClusterPlanType instantiates a new ClusterPlanType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterPlanType(name string, uuid string) *ClusterPlanType {
	this := ClusterPlanType{}
	this.Name = name
	this.Uuid = uuid
	return &this
}

// NewClusterPlanTypeWithDefaults instantiates a new ClusterPlanType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterPlanTypeWithDefaults() *ClusterPlanType {
	this := ClusterPlanType{}
	return &this
}

// GetName returns the Name field value
func (o *ClusterPlanType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ClusterPlanType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ClusterPlanType) SetName(v string) {
	o.Name = v
}

// GetUuid returns the Uuid field value
func (o *ClusterPlanType) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *ClusterPlanType) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *ClusterPlanType) SetUuid(v string) {
	o.Uuid = v
}

func (o ClusterPlanType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterPlanType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *ClusterPlanType) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterPlanType := _ClusterPlanType{}

	err = json.Unmarshal(bytes, &varClusterPlanType)

	if err != nil {
		return err
	}

	*o = ClusterPlanType(varClusterPlanType)

	return err
}

type NullableClusterPlanType struct {
	value *ClusterPlanType
	isSet bool
}

func (v NullableClusterPlanType) Get() *ClusterPlanType {
	return v.value
}

func (v *NullableClusterPlanType) Set(val *ClusterPlanType) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterPlanType) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterPlanType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterPlanType(val *ClusterPlanType) *NullableClusterPlanType {
	return &NullableClusterPlanType{value: val, isSet: true}
}

func (v NullableClusterPlanType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterPlanType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


