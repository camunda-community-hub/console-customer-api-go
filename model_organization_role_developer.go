/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrganizationRoleDEVELOPER the model 'OrganizationRoleDEVELOPER'
type OrganizationRoleDEVELOPER string

// List of OrganizationRole.DEVELOPER
const (
	DEVELOPER OrganizationRoleDEVELOPER = "developer"
)

// All allowed values of OrganizationRoleDEVELOPER enum
var AllowedOrganizationRoleDEVELOPEREnumValues = []OrganizationRoleDEVELOPER{
	"developer",
}

func (v *OrganizationRoleDEVELOPER) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationRoleDEVELOPER(value)
	for _, existing := range AllowedOrganizationRoleDEVELOPEREnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationRoleDEVELOPER", value)
}

// NewOrganizationRoleDEVELOPERFromValue returns a pointer to a valid OrganizationRoleDEVELOPER
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationRoleDEVELOPERFromValue(v string) (*OrganizationRoleDEVELOPER, error) {
	ev := OrganizationRoleDEVELOPER(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationRoleDEVELOPER: valid values are %v", v, AllowedOrganizationRoleDEVELOPEREnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationRoleDEVELOPER) IsValid() bool {
	for _, existing := range AllowedOrganizationRoleDEVELOPEREnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationRole.DEVELOPER value
func (v OrganizationRoleDEVELOPER) Ptr() *OrganizationRoleDEVELOPER {
	return &v
}

type NullableOrganizationRoleDEVELOPER struct {
	value *OrganizationRoleDEVELOPER
	isSet bool
}

func (v NullableOrganizationRoleDEVELOPER) Get() *OrganizationRoleDEVELOPER {
	return v.value
}

func (v *NullableOrganizationRoleDEVELOPER) Set(val *OrganizationRoleDEVELOPER) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationRoleDEVELOPER) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationRoleDEVELOPER) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationRoleDEVELOPER(val *OrganizationRoleDEVELOPER) *NullableOrganizationRoleDEVELOPER {
	return &NullableOrganizationRoleDEVELOPER{value: val, isSet: true}
}

func (v NullableOrganizationRoleDEVELOPER) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationRoleDEVELOPER) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

