/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrganizationRoleANALYST the model 'OrganizationRoleANALYST'
type OrganizationRoleANALYST string

// List of OrganizationRole.ANALYST
const (
	ANALYST OrganizationRoleANALYST = "analyst"
)

// All allowed values of OrganizationRoleANALYST enum
var AllowedOrganizationRoleANALYSTEnumValues = []OrganizationRoleANALYST{
	"analyst",
}

func (v *OrganizationRoleANALYST) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationRoleANALYST(value)
	for _, existing := range AllowedOrganizationRoleANALYSTEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationRoleANALYST", value)
}

// NewOrganizationRoleANALYSTFromValue returns a pointer to a valid OrganizationRoleANALYST
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationRoleANALYSTFromValue(v string) (*OrganizationRoleANALYST, error) {
	ev := OrganizationRoleANALYST(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationRoleANALYST: valid values are %v", v, AllowedOrganizationRoleANALYSTEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationRoleANALYST) IsValid() bool {
	for _, existing := range AllowedOrganizationRoleANALYSTEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationRole.ANALYST value
func (v OrganizationRoleANALYST) Ptr() *OrganizationRoleANALYST {
	return &v
}

type NullableOrganizationRoleANALYST struct {
	value *OrganizationRoleANALYST
	isSet bool
}

func (v NullableOrganizationRoleANALYST) Get() *OrganizationRoleANALYST {
	return v.value
}

func (v *NullableOrganizationRoleANALYST) Set(val *OrganizationRoleANALYST) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationRoleANALYST) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationRoleANALYST) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationRoleANALYST(val *OrganizationRoleANALYST) *NullableOrganizationRoleANALYST {
	return &NullableOrganizationRoleANALYST{value: val, isSet: true}
}

func (v NullableOrganizationRoleANALYST) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationRoleANALYST) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

