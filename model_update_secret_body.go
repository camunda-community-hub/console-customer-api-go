/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateSecretBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSecretBody{}

// UpdateSecretBody struct for UpdateSecretBody
type UpdateSecretBody struct {
	SecretValue string `json:"secretValue"`
}

type _UpdateSecretBody UpdateSecretBody

// NewUpdateSecretBody instantiates a new UpdateSecretBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSecretBody(secretValue string) *UpdateSecretBody {
	this := UpdateSecretBody{}
	this.SecretValue = secretValue
	return &this
}

// NewUpdateSecretBodyWithDefaults instantiates a new UpdateSecretBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSecretBodyWithDefaults() *UpdateSecretBody {
	this := UpdateSecretBody{}
	return &this
}

// GetSecretValue returns the SecretValue field value
func (o *UpdateSecretBody) GetSecretValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretValue
}

// GetSecretValueOk returns a tuple with the SecretValue field value
// and a boolean to check if the value has been set.
func (o *UpdateSecretBody) GetSecretValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretValue, true
}

// SetSecretValue sets field value
func (o *UpdateSecretBody) SetSecretValue(v string) {
	o.SecretValue = v
}

func (o UpdateSecretBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSecretBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["secretValue"] = o.SecretValue
	return toSerialize, nil
}

func (o *UpdateSecretBody) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"secretValue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateSecretBody := _UpdateSecretBody{}

	err = json.Unmarshal(bytes, &varUpdateSecretBody)

	if err != nil {
		return err
	}

	*o = UpdateSecretBody(varUpdateSecretBody)

	return err
}

type NullableUpdateSecretBody struct {
	value *UpdateSecretBody
	isSet bool
}

func (v NullableUpdateSecretBody) Get() *UpdateSecretBody {
	return v.value
}

func (v *NullableUpdateSecretBody) Set(val *UpdateSecretBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSecretBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSecretBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSecretBody(val *UpdateSecretBody) *NullableUpdateSecretBody {
	return &NullableUpdateSecretBody{value: val, isSet: true}
}

func (v NullableUpdateSecretBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSecretBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
