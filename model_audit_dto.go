/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AuditDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditDto{}

// AuditDto struct for AuditDto
type AuditDto struct {
	Audit                    string   `json:"audit"`
	AuditType                string   `json:"auditType"`
	Entity                   string   `json:"entity"`
	EntityAttribute          *string  `json:"entityAttribute,omitempty"`
	EntityAttributeValueFrom *string  `json:"entityAttributeValueFrom,omitempty"`
	EntityAttributeValueTo   *string  `json:"entityAttributeValueTo,omitempty"`
	EntityId                 string   `json:"entityId"`
	OrgId                    string   `json:"orgId"`
	ParentEntity             *string  `json:"parentEntity,omitempty"`
	ParentEntityId           *string  `json:"parentEntityId,omitempty"`
	Service                  string   `json:"service"`
	Timestamp                *float64 `json:"timestamp,omitempty"`
	UserId                   string   `json:"userId"`
}

type _AuditDto AuditDto

// NewAuditDto instantiates a new AuditDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditDto(audit string, auditType string, entity string, entityId string, orgId string, service string, userId string) *AuditDto {
	this := AuditDto{}
	this.Audit = audit
	this.AuditType = auditType
	this.Entity = entity
	this.EntityId = entityId
	this.OrgId = orgId
	this.Service = service
	this.UserId = userId
	return &this
}

// NewAuditDtoWithDefaults instantiates a new AuditDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditDtoWithDefaults() *AuditDto {
	this := AuditDto{}
	return &this
}

// GetAudit returns the Audit field value
func (o *AuditDto) GetAudit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Audit
}

// GetAuditOk returns a tuple with the Audit field value
// and a boolean to check if the value has been set.
func (o *AuditDto) GetAuditOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Audit, true
}

// SetAudit sets field value
func (o *AuditDto) SetAudit(v string) {
	o.Audit = v
}

// GetAuditType returns the AuditType field value
func (o *AuditDto) GetAuditType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuditType
}

// GetAuditTypeOk returns a tuple with the AuditType field value
// and a boolean to check if the value has been set.
func (o *AuditDto) GetAuditTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuditType, true
}

// SetAuditType sets field value
func (o *AuditDto) SetAuditType(v string) {
	o.AuditType = v
}

// GetEntity returns the Entity field value
func (o *AuditDto) GetEntity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *AuditDto) GetEntityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *AuditDto) SetEntity(v string) {
	o.Entity = v
}

// GetEntityAttribute returns the EntityAttribute field value if set, zero value otherwise.
func (o *AuditDto) GetEntityAttribute() string {
	if o == nil || IsNil(o.EntityAttribute) {
		var ret string
		return ret
	}
	return *o.EntityAttribute
}

// GetEntityAttributeOk returns a tuple with the EntityAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDto) GetEntityAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityAttribute) {
		return nil, false
	}
	return o.EntityAttribute, true
}

// HasEntityAttribute returns a boolean if a field has been set.
func (o *AuditDto) HasEntityAttribute() bool {
	if o != nil && !IsNil(o.EntityAttribute) {
		return true
	}

	return false
}

// SetEntityAttribute gets a reference to the given string and assigns it to the EntityAttribute field.
func (o *AuditDto) SetEntityAttribute(v string) {
	o.EntityAttribute = &v
}

// GetEntityAttributeValueFrom returns the EntityAttributeValueFrom field value if set, zero value otherwise.
func (o *AuditDto) GetEntityAttributeValueFrom() string {
	if o == nil || IsNil(o.EntityAttributeValueFrom) {
		var ret string
		return ret
	}
	return *o.EntityAttributeValueFrom
}

// GetEntityAttributeValueFromOk returns a tuple with the EntityAttributeValueFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDto) GetEntityAttributeValueFromOk() (*string, bool) {
	if o == nil || IsNil(o.EntityAttributeValueFrom) {
		return nil, false
	}
	return o.EntityAttributeValueFrom, true
}

// HasEntityAttributeValueFrom returns a boolean if a field has been set.
func (o *AuditDto) HasEntityAttributeValueFrom() bool {
	if o != nil && !IsNil(o.EntityAttributeValueFrom) {
		return true
	}

	return false
}

// SetEntityAttributeValueFrom gets a reference to the given string and assigns it to the EntityAttributeValueFrom field.
func (o *AuditDto) SetEntityAttributeValueFrom(v string) {
	o.EntityAttributeValueFrom = &v
}

// GetEntityAttributeValueTo returns the EntityAttributeValueTo field value if set, zero value otherwise.
func (o *AuditDto) GetEntityAttributeValueTo() string {
	if o == nil || IsNil(o.EntityAttributeValueTo) {
		var ret string
		return ret
	}
	return *o.EntityAttributeValueTo
}

// GetEntityAttributeValueToOk returns a tuple with the EntityAttributeValueTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDto) GetEntityAttributeValueToOk() (*string, bool) {
	if o == nil || IsNil(o.EntityAttributeValueTo) {
		return nil, false
	}
	return o.EntityAttributeValueTo, true
}

// HasEntityAttributeValueTo returns a boolean if a field has been set.
func (o *AuditDto) HasEntityAttributeValueTo() bool {
	if o != nil && !IsNil(o.EntityAttributeValueTo) {
		return true
	}

	return false
}

// SetEntityAttributeValueTo gets a reference to the given string and assigns it to the EntityAttributeValueTo field.
func (o *AuditDto) SetEntityAttributeValueTo(v string) {
	o.EntityAttributeValueTo = &v
}

// GetEntityId returns the EntityId field value
func (o *AuditDto) GetEntityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *AuditDto) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *AuditDto) SetEntityId(v string) {
	o.EntityId = v
}

// GetOrgId returns the OrgId field value
func (o *AuditDto) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *AuditDto) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *AuditDto) SetOrgId(v string) {
	o.OrgId = v
}

// GetParentEntity returns the ParentEntity field value if set, zero value otherwise.
func (o *AuditDto) GetParentEntity() string {
	if o == nil || IsNil(o.ParentEntity) {
		var ret string
		return ret
	}
	return *o.ParentEntity
}

// GetParentEntityOk returns a tuple with the ParentEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDto) GetParentEntityOk() (*string, bool) {
	if o == nil || IsNil(o.ParentEntity) {
		return nil, false
	}
	return o.ParentEntity, true
}

// HasParentEntity returns a boolean if a field has been set.
func (o *AuditDto) HasParentEntity() bool {
	if o != nil && !IsNil(o.ParentEntity) {
		return true
	}

	return false
}

// SetParentEntity gets a reference to the given string and assigns it to the ParentEntity field.
func (o *AuditDto) SetParentEntity(v string) {
	o.ParentEntity = &v
}

// GetParentEntityId returns the ParentEntityId field value if set, zero value otherwise.
func (o *AuditDto) GetParentEntityId() string {
	if o == nil || IsNil(o.ParentEntityId) {
		var ret string
		return ret
	}
	return *o.ParentEntityId
}

// GetParentEntityIdOk returns a tuple with the ParentEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDto) GetParentEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentEntityId) {
		return nil, false
	}
	return o.ParentEntityId, true
}

// HasParentEntityId returns a boolean if a field has been set.
func (o *AuditDto) HasParentEntityId() bool {
	if o != nil && !IsNil(o.ParentEntityId) {
		return true
	}

	return false
}

// SetParentEntityId gets a reference to the given string and assigns it to the ParentEntityId field.
func (o *AuditDto) SetParentEntityId(v string) {
	o.ParentEntityId = &v
}

// GetService returns the Service field value
func (o *AuditDto) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *AuditDto) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *AuditDto) SetService(v string) {
	o.Service = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *AuditDto) GetTimestamp() float64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret float64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDto) GetTimestampOk() (*float64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *AuditDto) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given float64 and assigns it to the Timestamp field.
func (o *AuditDto) SetTimestamp(v float64) {
	o.Timestamp = &v
}

// GetUserId returns the UserId field value
func (o *AuditDto) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *AuditDto) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *AuditDto) SetUserId(v string) {
	o.UserId = v
}

func (o AuditDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["audit"] = o.Audit
	toSerialize["auditType"] = o.AuditType
	toSerialize["entity"] = o.Entity
	if !IsNil(o.EntityAttribute) {
		toSerialize["entityAttribute"] = o.EntityAttribute
	}
	if !IsNil(o.EntityAttributeValueFrom) {
		toSerialize["entityAttributeValueFrom"] = o.EntityAttributeValueFrom
	}
	if !IsNil(o.EntityAttributeValueTo) {
		toSerialize["entityAttributeValueTo"] = o.EntityAttributeValueTo
	}
	toSerialize["entityId"] = o.EntityId
	toSerialize["orgId"] = o.OrgId
	if !IsNil(o.ParentEntity) {
		toSerialize["parentEntity"] = o.ParentEntity
	}
	if !IsNil(o.ParentEntityId) {
		toSerialize["parentEntityId"] = o.ParentEntityId
	}
	toSerialize["service"] = o.Service
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	toSerialize["userId"] = o.UserId
	return toSerialize, nil
}

func (o *AuditDto) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"audit",
		"auditType",
		"entity",
		"entityId",
		"orgId",
		"service",
		"userId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditDto := _AuditDto{}

	err = json.Unmarshal(bytes, &varAuditDto)

	if err != nil {
		return err
	}

	*o = AuditDto(varAuditDto)

	return err
}

type NullableAuditDto struct {
	value *AuditDto
	isSet bool
}

func (v NullableAuditDto) Get() *AuditDto {
	return v.value
}

func (v *NullableAuditDto) Set(val *AuditDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditDto(val *AuditDto) *NullableAuditDto {
	return &NullableAuditDto{value: val, isSet: true}
}

func (v NullableAuditDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
