/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrganizationRoleOPERATIONSENGINEER the model 'OrganizationRoleOPERATIONSENGINEER'
type OrganizationRoleOPERATIONSENGINEER string

// List of OrganizationRole.OPERATIONS_ENGINEER
const (
	OPERATIONSENGINEER OrganizationRoleOPERATIONSENGINEER = "operationsengineer"
)

// All allowed values of OrganizationRoleOPERATIONSENGINEER enum
var AllowedOrganizationRoleOPERATIONSENGINEEREnumValues = []OrganizationRoleOPERATIONSENGINEER{
	"operationsengineer",
}

func (v *OrganizationRoleOPERATIONSENGINEER) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationRoleOPERATIONSENGINEER(value)
	for _, existing := range AllowedOrganizationRoleOPERATIONSENGINEEREnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationRoleOPERATIONSENGINEER", value)
}

// NewOrganizationRoleOPERATIONSENGINEERFromValue returns a pointer to a valid OrganizationRoleOPERATIONSENGINEER
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationRoleOPERATIONSENGINEERFromValue(v string) (*OrganizationRoleOPERATIONSENGINEER, error) {
	ev := OrganizationRoleOPERATIONSENGINEER(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationRoleOPERATIONSENGINEER: valid values are %v", v, AllowedOrganizationRoleOPERATIONSENGINEEREnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationRoleOPERATIONSENGINEER) IsValid() bool {
	for _, existing := range AllowedOrganizationRoleOPERATIONSENGINEEREnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationRole.OPERATIONS_ENGINEER value
func (v OrganizationRoleOPERATIONSENGINEER) Ptr() *OrganizationRoleOPERATIONSENGINEER {
	return &v
}

type NullableOrganizationRoleOPERATIONSENGINEER struct {
	value *OrganizationRoleOPERATIONSENGINEER
	isSet bool
}

func (v NullableOrganizationRoleOPERATIONSENGINEER) Get() *OrganizationRoleOPERATIONSENGINEER {
	return v.value
}

func (v *NullableOrganizationRoleOPERATIONSENGINEER) Set(val *OrganizationRoleOPERATIONSENGINEER) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationRoleOPERATIONSENGINEER) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationRoleOPERATIONSENGINEER) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationRoleOPERATIONSENGINEER(val *OrganizationRoleOPERATIONSENGINEER) *NullableOrganizationRoleOPERATIONSENGINEER {
	return &NullableOrganizationRoleOPERATIONSENGINEER{value: val, isSet: true}
}

func (v NullableOrganizationRoleOPERATIONSENGINEER) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationRoleOPERATIONSENGINEER) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

