/*
Camunda Management API

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/camunda-community-hub/console-customer-api-go"
)

func Test_openapi_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService CreateBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterUuid string

		resp, httpRes, err := apiClient.DefaultAPI.CreateBackup(context.Background(), clusterUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterUuid string

		resp, httpRes, err := apiClient.DefaultAPI.CreateClient(context.Background(), clusterUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CreateCluster(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterUuid string

		httpRes, err := apiClient.DefaultAPI.CreateSecret(context.Background(), clusterUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterUuid string
		var backupId string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteBackup(context.Background(), clusterUuid, backupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterUuid string
		var clientId string

		httpRes, err := apiClient.DefaultAPI.DeleteClient(context.Background(), clusterUuid, clientId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterUuid string

		httpRes, err := apiClient.DefaultAPI.DeleteCluster(context.Background(), clusterUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var email string

		httpRes, err := apiClient.DefaultAPI.DeleteMember(context.Background(), email).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterUuid string
		var secretName string

		httpRes, err := apiClient.DefaultAPI.DeleteSecret(context.Background(), clusterUuid, secretName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetBackups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterUuid string

		resp, httpRes, err := apiClient.DefaultAPI.GetBackups(context.Background(), clusterUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterUuid string
		var clientId string

		resp, httpRes, err := apiClient.DefaultAPI.GetClient(context.Background(), clusterUuid, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetClients", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterUuid string

		resp, httpRes, err := apiClient.DefaultAPI.GetClients(context.Background(), clusterUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterUuid string

		resp, httpRes, err := apiClient.DefaultAPI.GetCluster(context.Background(), clusterUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetClusters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetClusters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetMembers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetParameters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetParameters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetSecrets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterUuid string

		resp, httpRes, err := apiClient.DefaultAPI.GetSecrets(context.Background(), clusterUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateIpWhitelist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterUuid string

		httpRes, err := apiClient.DefaultAPI.UpdateIpWhitelist(context.Background(), clusterUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var email string

		httpRes, err := apiClient.DefaultAPI.UpdateMembers(context.Background(), email).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
