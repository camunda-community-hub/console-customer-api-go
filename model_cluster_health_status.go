/*
Camunda Management API

Manage Camunda Clusters and API Clients via API.

API version: 1.3.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ClusterHealthStatus the model 'ClusterHealthStatus'
type ClusterHealthStatus string

// List of ClusterHealthStatus
const (
	HEALTHY   ClusterHealthStatus = "Healthy"
	UNHEALTHY ClusterHealthStatus = "Unhealthy"
	CREATING  ClusterHealthStatus = "Creating"
	UPDATING  ClusterHealthStatus = "Updating"
)

// All allowed values of ClusterHealthStatus enum
var AllowedClusterHealthStatusEnumValues = []ClusterHealthStatus{
	"Healthy",
	"Unhealthy",
	"Creating",
	"Updating",
}

func (v *ClusterHealthStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterHealthStatus(value)
	for _, existing := range AllowedClusterHealthStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterHealthStatus", value)
}

// NewClusterHealthStatusFromValue returns a pointer to a valid ClusterHealthStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterHealthStatusFromValue(v string) (*ClusterHealthStatus, error) {
	ev := ClusterHealthStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterHealthStatus: valid values are %v", v, AllowedClusterHealthStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterHealthStatus) IsValid() bool {
	for _, existing := range AllowedClusterHealthStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterHealthStatus value
func (v ClusterHealthStatus) Ptr() *ClusterHealthStatus {
	return &v
}

type NullableClusterHealthStatus struct {
	value *ClusterHealthStatus
	isSet bool
}

func (v NullableClusterHealthStatus) Get() *ClusterHealthStatus {
	return v.value
}

func (v *NullableClusterHealthStatus) Set(val *ClusterHealthStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterHealthStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterHealthStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterHealthStatus(val *ClusterHealthStatus) *NullableClusterHealthStatus {
	return &NullableClusterHealthStatus{value: val, isSet: true}
}

func (v NullableClusterHealthStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterHealthStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
